1️⃣ Choose a Cloud Provider
Pick AWS, GCP, or Azure (whichever you're comfortable with or want to learn).
Ensure you’re using the free tier and set up authentication (IAM roles, service accounts, or credentials for Ansible).
Use Ansible cloud modules to create VMs dynamically:
AWS: amazon.aws.ec2_instance
GCP: google.cloud.gce_instance
Azure: azure.azcollection.azure_rm_virtualmachine

2️⃣ Define the Infrastructure with Ansible
Create three VMs:
1 DB Server (MariaDB/MySQL)
2 Web Servers (Flask + Nginx)
Store credentials securely using Ansible Vault.

3️⃣ Use Dynamic Inventory
Instead of a static inventory.yml, configure dynamic inventory to fetch real-time VM details after deployment.
Example:
AWS: amazon.aws.ec2_instance_facts
GCP: gcp_compute_instance_facts
Azure: azure.azcollection.azure_rm_virtualmachine_info

4️⃣ Install & Configure Dependencies
Use Ansible roles (check Ansible Galaxy for existing ones):
Install MySQL on DB server
Install Flask + dependencies on web servers
Set up Nginx as a reverse proxy (or use a cloud LB)

5️⃣ Deploy the App
Use ansible.builtin.git module to clone source code from GitHub into the web servers.
Start Flask using systemd or supervisord.

6️⃣ Configure Load Balancing
Option 1: Use Nginx as a load balancer on a separate VM.
Option 2: Use AWS ALB, GCP Load Balancer, or Azure Load Balancer.

7️⃣ Automate Notification
After deployment, send an email notification using:
community.general.mail module
SMTP (e.g., Gmail, AWS SES)
Include server details (IP, ports, credentials)

8️⃣ Secure Everything
Store credentials in Ansible Vault.
Use firewall rules / security groups to allow traffic only on necessary ports.